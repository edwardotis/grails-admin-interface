You can configure the administration screens with a specific DSL that can be configure either in your
Config.groovy or in classes of type "Admin" that also allows the redefinition of some methods.

h3. Configuration on Config.groovy file

{code}
grails.plugin.admin.domain.Test = {
    create includes: ["name", "description", "dateCreated", "endDate"],
    widget "address", "net.kaleidos.test.MyTestWidget", width: 500, height: 100
}
{code}

h3. Configuration on "Admin" entities

{code}
package test

class TestAdmin {
    static options = {
        create includes: ["name", "description", "dateCreated", "endDate"],
        widget "address", "net.kaleidos.test.MyTestWidget", width: 500, height: 100
    }

}
{code}

Then you should associate your admin class with the domain entity that manage.

{code}
grails.plugin.admin.domain.Test = "test.TestAdmin"
{code}

h4. Include properties

You can select which properties the administration will display on a specific operation.

The order will be preserved in the form.

{code}
grails.plugin.admin.domain.Test = {
    list includes: ["name", "description", "dateCreated", "endDate"]
    create includes: ["name", "description"]
    edit includes: ["name", "description"]
}
{code}


h4. Exclude Properties

You can customize which properties will be excluded from the administration screens.

{code}
grails.plugin.admin.domain.Test = {
    list excludes: ["startDate", "endDate"]
    create excludes: ["startDate", "endDate"]
    edit excludes: ["startDate", "endDate"]
}
{code}

h4. Custom widgets

For some properties the default editor/renderer may not be enough. You can customize this behaviour writing your own widget.
Further documentation on the [widgets] sections.

{code}
grails.plugin.admin.domain.Test = {
    widget "address", "net.kaleidos.test.MyTestWidget", width: 500, height: 100
}
{code}

